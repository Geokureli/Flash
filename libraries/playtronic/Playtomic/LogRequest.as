/* Playtomic ActionScript 3 API----------------------------------------------------------------------- Documentation is available at:  	https://playtomic.com/api/as3 Support is available at: 	https://playtomic.com/community  	https://playtomic.com/issues 	https://playtomic.com/support has more options if you're a premium user Github repositories: 	https://github.com/playtomicYou may modify this SDK if you wish but be kind to our servers.  Becareful about modifying the analytics stuff as it may give you borked reports.Pull requests are welcome if you spot a bug or know a more efficientway to implement something.Copyright (c) 2011 Playtomic Inc.  Playtomic APIs and SDKs are licensed under the MIT license.  Certain portions may come from 3rd parties and carry their own licensing terms and are referenced where applicable.*/package Playtomic{	internal final class LogRequest	{		private static var Pool:Array = new Array();				private var _data:String = "";		private var _hasView:Boolean = false;		private var _hasPlay:Boolean = false;		internal var ready:Boolean = false;		/**		 * Creates a log request or re-uses an old one from the pool		 */		internal static function Create():LogRequest		{			var request:LogRequest = Pool.length > 0 ? Pool.pop() as LogRequest : new LogRequest();			request._data = "";			request._hasView = false;			request._hasPlay = false;			request.ready = false;						return request;		}				/**		 * Adds queued events to the data		 */		internal function MassQueue(data:Array):void		{			for(var i:int=data.length-1; i>-1; i--)			{				Queue(data[i]);				data.splice(i, 1);				if(ready)				{					Send();											var request:LogRequest = Create();					request.MassQueue(data);					return;				}			}						Log.LogQueue = this;		}				/**		 * Queues a single event		 */		internal function Queue(data:String):void		{			_data += (_data == "" ? "" : "~") + data;						if(_data.indexOf("v/") > -1)				_hasView = true;							if(_data.indexOf("p/") > -1)				_hasPlay = true;			if(_data.length > 300)			{				ready = true;			}		}		/**		 * Sends the data 		 */		public function Send():void		{			if(_data == "")				return;						PRequest.SendStatistics(Complete, "/tracker/q.aspx?q=" + _data + "&url=" + (_hasView ? Log.SourceUrl : Log.BaseUrl));		}				/**		 * Increases views/plays counter if successful and stores the request for re-use		 */		private function Complete(success:Boolean):void		{			if(success)			{				if(_hasView)					Log.IncreaseViews();					if(_hasPlay)					Log.IncreasePlays();			}			Pool.push(this);		}	}}