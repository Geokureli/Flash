/* Playtomic ActionScript 3 API----------------------------------------------------------------------- Documentation is available at:  	https://playtomic.com/api/as3 Support is available at: 	https://playtomic.com/community  	https://playtomic.com/issues 	https://playtomic.com/support has more options if you're a premium user Github repositories: 	https://github.com/playtomicYou may modify this SDK if you wish but be kind to our servers.  Becareful about modifying the analytics stuff as it may give you borked reports.Pull requests are welcome if you spot a bug or know a more efficientway to implement something.Copyright (c) 2011 Playtomic Inc.  Playtomic APIs and SDKs are licensed under the MIT license.  Certain portions may come from 3rd parties and carry their own licensing terms and are referenced where applicable.*/package Playtomic{	import flash.external.ExternalInterface;		public final class Leaderboards	{		public static const TODAY:String = "today";		public static const LAST7DAYS:String = "last7days";		public static const LAST30DAYS:String = "last30days";		public static const ALLTIME:String = "alltime";		public static const NEWEST:String = "newest";				private static var SECTION:String;		private static var CREATEPRIVATELEADERBOARD:String;		private static var LOADPRIVATELEADERBOARD:String;		private static var SAVEANDLIST:String;		private static var SAVE:String;		private static var LIST:String;				internal static function Initialise(apikey:String):void		{			SECTION = Encode.MD5("leaderboards-" + apikey);			CREATEPRIVATELEADERBOARD = Encode.MD5("leaderboards-createprivateleaderboard-" + apikey);			LOADPRIVATELEADERBOARD = Encode.MD5("leaderboards-loadprivateleaderboard-" + apikey);			SAVEANDLIST = Encode.MD5("leaderboards-saveandlist-" + apikey);			SAVE = Encode.MD5("leaderboards-save-" + apikey);			LIST = Encode.MD5("leaderboards-list-" + apikey);		}				/**		 * Creates a private leaderboard for the user		 * @param	table		The name of the leaderboard		 * @param	permalink	The stem of the permalink, eg http://mywebsite.com/game.html?leaderboard=		 * @param	callback	Callback function to receive the data:  function(leaderboard:Leaderboard, response:Response)		 * @param	highest		The board's mode (true for highest, false for lowest)		 */		public static function CreatePrivateLeaderboard(table:String, permalink:String, callback:Function = null, highest:Boolean=true):void		{			var postdata:Object = new Object();			postdata["table"] = table;			postdata["highest"] = highest ? "y" : "n";			postdata["permalink"] = permalink;						PRequest.Load(SECTION, CREATEPRIVATELEADERBOARD, CreatePrivateLeaderboardComplete, callback, postdata);		}				/**		 * Processes the response received from the server, returns the data and response to the user's callback		 * @param	callback	The user's callback function		 * @param	postdata	The data that was posted		 * @param	data		The XML returned from the server		 * @param	response	The response from the server		 */		private static function CreatePrivateLeaderboardComplete(callback:Function, postdata:Object, data:XML = null, response:Response = null):void		{			if(callback == null)				return;							var leaderboard:PrivateLeaderboard = null;						if(response.Success)			{				leaderboard = new PrivateLeaderboard(data["tableid"], data["name"], data["bitly"], data["permalink"], data["highest"] == "true", data["realname"]);			}						callback(leaderboard, response);			postdata = postdata;		}				/**		 * Loads a private leaderboard		 * @param	tableid		The id of the leaderboard		 * @param	callback	Callback function to receive the data:  function(leaderboard:Leaderboard, response:Response)		 */		public static function LoadPrivateLeaderboard(tableid:String, callback:Function=null):void		{			var postdata:Object = new Object();			postdata["tableid"] = tableid;						PRequest.Load(SECTION, LOADPRIVATELEADERBOARD, LoadPrivateLeaderboardComplete, callback, postdata);		}				/**		 * Processes the response received from the server, returns the data and response to the user's callback		 * @param	callback	The user's callback function		 * @param	postdata	The data that was posted		 * @param	data		The XML returned from the server		 * @param	response	The response from the server		 */		private static function LoadPrivateLeaderboardComplete(callback:Function, postdata:Object, data:XML = null, response:Response = null):void		{			if(callback == null)				return;						var leaderboard:PrivateLeaderboard = null;						if(response.Success)			{				leaderboard = new PrivateLeaderboard(data["tableid"], data["name"], data["bitly"], data["permalink"], data["highest"] == "true", data["realname"]);			}						callback(leaderboard, response);			postdata = postdata;		}				/**		 * Attempts to retrieve a leaderboard id from the URL (eg http://url.com/game?leaderboard=xxxx)		 */		public static function GetLeaderboardFromUrl():String		{			if(!ExternalInterface.available)				return null;							try			{				var url:String = String(ExternalInterface.call("window.location.href.toString"));								if(url.indexOf("?") == -1)					return null;									var leaderboardid:String = url.substring(url.indexOf("leaderboard=") + 12);								if(leaderboardid.indexOf("&") > -1)					leaderboardid = leaderboardid.substring(0, leaderboardid.indexOf("&"));				if(leaderboardid.indexOf("#") > -1)					leaderboardid = leaderboardid.substring(0, leaderboardid.indexOf("#"));				return leaderboardid;			}			catch(s:Error)			{							}								return null;		}				/**		 * Performs a save and a list in a single request that returns the player's score and page of scores it occured on		 * @param	score		The player's score as a PlayerScore		 * @param	table		The name of the leaderboard		 * @param	callback	Callback function to receive the data:  function(scores:Array, numscores:int, response:Response)		 * @param	options		The leaderboard options, check the documentation at http://playtomic.com/api/as3#Leaderboards		 */		public static function SaveAndList(score:PlayerScore, table:String, callback:Function = null, options:Object=null):void		{			if(options == null)				options = new Object();						var allowduplicates:Boolean = options.hasOwnProperty("allowduplicates") ? options["allowduplicates"] : false;			var global:Boolean = options.hasOwnProperty("global") ? options["global"] : true;			var highest:Boolean = options.hasOwnProperty("highest") ? options["highest"] : true;			var mode:String = options.hasOwnProperty("mode") ? options["mode"] : "alltime";			var customfilters:Object = options.hasOwnProperty("customfilters") ? options["customfilters"] : {};			var page:int = options.hasOwnProperty("page") ? options["page"] : 1;			var perpage:int = options.hasOwnProperty("perpage") ? options["perpage"] : 20;			var friendslist:Array = options.hasOwnProperty("friendslist") ? options["friendslist"] : new Array();			var postdata:Object = new Object();						// save options			postdata["url"] = Log.SourceUrl;			postdata["table"] = table;			postdata["highest"] = highest ? "y" : "n";			postdata["name"] = score.Name;			postdata["points"] = score.Points.toString();			postdata["allowduplicates"] = allowduplicates ? "y" : "n";						var numfields:int = 0;						if(score.CustomData != null)			{				for(var dkey:String in score.CustomData)				{					postdata["ckey" + numfields] = dkey;					postdata["cdata" + numfields] = score.CustomData[dkey];					numfields++;				}			}						postdata["numfields"] = numfields;						// list options			postdata["global"] = global ? "y" : "n";			postdata["mode"] = mode;			postdata["page"] = page;			postdata["perpage"] = perpage;						var numfilters:int = 0;						if(customfilters != null)			{				for(var fkey:String in customfilters)				{					postdata["lkey" + numfilters] = fkey;					postdata["ldata" + numfilters] = customfilters[fkey];					numfilters++;				}			}						postdata["numfilters"] = numfilters;						if(score.FBUserId != null && score.FBUserId != "")			{				if(friendslist.length > 0)					postdata["friendslist"] = friendslist.join(",");								postdata["fbuserid"] = score.FBUserId;			}			PRequest.Load(SECTION, SAVEANDLIST, SaveAndListComplete, callback, postdata);		}				/**		 * Processes the response received from the server, returns the data and response to the user's callback		 * @param	callback	The user's callback function		 * @param	postdata	The data that was posted		 * @param	data		The XML returned from the server		 * @param	response	The response from the server		 */		private static function SaveAndListComplete(callback:Function, postdata:Object, data:XML = null, response:Response = null):void		{			if(callback == null)				return;						if(response.Success)			{								ProcessScores(data, response, callback);			}			else			{				callback([], 0, response);			}						postdata = postdata;		}				/**		 * Saves a user's score		 * @param	score		The player's score as a PlayerScore		 * @param	table		The name of the leaderboard		 * @param	callback	Callback function to receive the data:  function(score:PlayerScore, response:Response)		 * @param	options		The leaderboard options, check the documentation at http://playtomic.com/api/as3#Leaderboards		 */		public static function Save(score:PlayerScore, table:String, callback:Function = null, options:Object = null):void		{			if(options == null)				options = new Object();						var allowduplicates:Boolean = options.hasOwnProperty("allowduplicates") ? options["allowduplicates"] : false;			var highest:Boolean = options.hasOwnProperty("highest") ? options["highest"] : true;			// save the score			var s:String = score.Points.toString();						if(s.indexOf(".") > -1)				s = s.substring(0, s.indexOf("."));						var postdata:Object = new Object();			var customfields:int = 0;						if(score.CustomData != null)			{				for(var key:String in score.CustomData)				{					postdata["ckey" + customfields] = key;					postdata["cdata" + customfields] = score.CustomData[key];					customfields++;				}			}						postdata["url"] = Log.BaseUrl;			postdata["table"] = table;			postdata["highest"] = highest ? "y" : "n";			postdata["name"] = score.Name;			postdata["points"] = s;			postdata["allowduplicates"] = allowduplicates ? "y" : "n";			postdata["auth"] = Encode.MD5(Log.BaseUrl + s);			postdata["fb"] = score.FBUserId != "" && score.FBUserId != null ? "y" : "n";			postdata["fbuserid"] = score.FBUserId;			postdata["customfields"] = customfields;						PRequest.Load(SECTION, SAVE, SaveComplete, callback, postdata);		}				/**		 * Processes the response received from the server, returns the data and response to the user's callback		 * @param	callback	The user's callback function		 * @param	postdata	The data that was posted		 * @param	data		The XML returned from the server		 * @param	response	The response from the server		 */		private static function SaveComplete(callback:Function, postdata:Object, data:XML = null, response:Response = null):void		{			if(callback == null)				return;						data = data;			postdata = postdata;								callback(response);		}				/**		 * Lists scores from a table		 * @param	table		The name of the leaderboard		 * @param	callback	Callback function to receive the data:  function(scores:Array, numscores:int, response:Response)		 * @param	options		The leaderboard options, check the documentation at http://playtomic.com/api/as3#Leaderboards		 */		public static function List(table:String, callback:Function, options:Object = null):void		{			//trace("List");			if(options == null)				options = new Object();						var global:Boolean = options.hasOwnProperty("global") ? options["global"] : true;			var highest:Boolean = options.hasOwnProperty("highest") ? options["highest"] : true;			var mode:String = options.hasOwnProperty("mode") ? options["mode"] : "alltime";			var customfilters:Object = options.hasOwnProperty("customfilters") ? options["customfilters"] : new Object();			var page:int = options.hasOwnProperty("page") ? options["page"] : 1;			var perpage:int = options.hasOwnProperty("perpage") ? options["perpage"] : 20;			var facebook:Boolean = options.hasOwnProperty("facebook") ? options["facebook"] : false;			var friendslist:Array = options.hasOwnProperty("friendslist") ? options["friendslist"] : new Array();			var postdata:Object = new Object();			var numfilters:int = 0;						for(var key:String in customfilters)			{				postdata["ckey" + numfilters] = key;				postdata["cdata" + numfilters] = customfilters[key];				numfilters++;			}						postdata["url"] = (global || Log.BaseUrl == null ? "global" : Log.BaseUrl) ;			postdata["mode"] = mode;			postdata["page"] = page;			postdata["perpage"] = perpage;			postdata["highest"] = highest ? "y" : "n";			postdata["filters"] = numfilters;			postdata["table"] = table;						if(facebook || friendslist.length > 0)			{				postdata["friendslist"] = friendslist.join(",");				trace(postdata["friendslist"]);			}						//trace("posting ");			//for(var x:String in postdata)			//	trace(x + ": " + postdata[x]);						PRequest.Load(SECTION, LIST, ListComplete, callback, postdata);		}				/**		 * Processes the response received from the server, returns the data and response to the user's callback		 * @param	callback	The user's callback function		 * @param	postdata	The data that was posted		 * @param	data		The XML returned from the server		 * @param	response	The response from the server		 */		private static function ListComplete(callback:Function, postdata:Object, data:XML = null, response:Response = null):void		{			if(callback == null)				return;						if(response.Success)			{								ProcessScores(data, response, callback);			}			else			{				callback([], 0, response);			}						postdata = postdata;		}		/**		 * Processes the scores received from a List request		 * @param	data		The XML returned from the server		 * @param	response	The response from the server		 * @param	callback	The user's callback function		 */		private static function ProcessScores(data:XML, response:Response, callback:Function):void		{						var numscores:int = parseInt(data["numscores"]);			var results:Array = new Array();			var entries:XMLList = data["score"];			var datestring:String;			var year:int;			var month:int;			var day:int;								for each(var item:XML in entries) 			{				datestring = item["sdate"];								year = int(datestring.substring(datestring.lastIndexOf("/") + 1));				month = int(datestring.substring(0, datestring.indexOf("/")));				day = int(datestring.substring(datestring.indexOf("/" ) +1).substring(0, 2));								var score:PlayerScore = new PlayerScore();				score.SDate = new Date(year, month-1, day);				score.RDate = item["rdate"];				score.Name = item["name"];				score.Points = item["points"];				score.Website = item["website"];				score.Rank = item["rank"];								if(item["submittedorbest"] != null)					score.SubmittedOrBest = item["submittedorbest"] == "true";								if(item["fbuserid"])					score.FBUserId = item["fbuserid"];								if(item["custom"])				{								var custom:XMLList = item["custom"];										for each(var cfield:XML in custom.children())					{						score.CustomData[cfield.name()] = cfield.text();					}				}								results.push(score);			}						callback(results, numscores, response);		}	}}