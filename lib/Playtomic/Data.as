/* Playtomic ActionScript 3 API----------------------------------------------------------------------- Documentation is available at:  	https://playtomic.com/api/as3 Support is available at: 	https://playtomic.com/community  	https://playtomic.com/issues 	https://playtomic.com/support has more options if you're a premium user Github repositories: 	https://github.com/playtomicYou may modify this SDK if you wish but be kind to our servers.  Becareful about modifying the analytics stuff as it may give you borked reports.Pull requests are welcome if you spot a bug or know a more efficientway to implement something.Copyright (c) 2011 Playtomic Inc.  Playtomic APIs and SDKs are licensed under the MIT license.  Certain portions may come from 3rd parties and carry their own licensing terms and are referenced where applicable.*/package Playtomic{	public final class Data	{		private static var SECTION:String;		private static var VIEWS:String;		private static var PLAYS:String;		private static var PLAYTIME:String;		private static var CUSTOMMETRIC:String;		private static var LEVELCOUNTERMETRIC:String;		private static var LEVELRANGEDMETRIC:String;		private static var LEVELAVERAGEMETRIC:String;				internal static function Initialise(apikey:String):void		{			SECTION = Encode.MD5("data-" + apikey);			VIEWS = Encode.MD5("data-views-" + apikey);			PLAYS = Encode.MD5("data-plays-" + apikey);			PLAYTIME = Encode.MD5("data-playtime-" + apikey);			CUSTOMMETRIC = Encode.MD5("data-custommetric-" + apikey);			LEVELCOUNTERMETRIC = Encode.MD5("data-levelcountermetric-" + apikey);			LEVELRANGEDMETRIC = Encode.MD5("data-levelrangedmetric-" + apikey);			LEVELAVERAGEMETRIC = Encode.MD5("data-levelaveragemetric-" + apikey);		}				/**		 * Loads the views your game logged on a day or all time		 * @param	callback	Your function to receive the data:  callback(data:Object, response:Response);		 * @param	options		Object with day, month, year properties or null for all time		 */		public static function Views(callback:Function, options:Object=null):void		{			General(VIEWS, "Views", callback, options);		}				/**		 * Loads the plays your game logged on a day or all time		 * @param	callback	Your function to receive the data:  callback(data:Object, response:Response);		 * @param	options		Object with day, month, year properties or null for all time		 */		public static function Plays(callback:Function, options:Object=null):void		{			General(PLAYS, "Plays", callback, options);		}		/**		 * Loads the playtime your game logged on a day or all time		 * @param	callback	Your function to receive the data:  callback(data:Object, response:Response);		 * @param	options		Object with day, month, year properties or null for all time		 */		public static function PlayTime(callback:Function, options:Object=null):void		{					General(PLAYTIME, "Playtime", callback, options);		}				/**		 * Passes a general request on		 * @param	action		The action on the server		 * @param	type		The type of data being requested		 * @param	callback	The user's callback function		 * @param	options		Object with day, month, year properties or null for all time		 */		private static function General(action:String, type:String, callback:Function, options:Object):void		{			if(options == null)				options = new Object();							var postdata:Object = new Object();			postdata["type"] = type;			postdata["day"] = options.hasOwnProperty("day") ? options["day"] : 0;			postdata["month"] = options.hasOwnProperty("month") ? options["month"] : 0;			postdata["year"] = options.hasOwnProperty("year") ? options["year"] : 0;			PRequest.Load(SECTION, action, GeneralComplete, callback, postdata);		}				/**		 * Processes the response received from the server, returns the data and response to the user's callback		 * @param	callback	The user's callback function		 * @param	postdata	The data that was posted		 * @param	data		The XML returned from the server		 * @param	response	The response from the server		 */		private static function GeneralComplete(callback:Function, postdata:Object, data:XML = null, response:Response = null):void		{			if(callback == null)				return;							var result:Object = new Object();													if(response.Success == 1)			{				result["Name"] = postdata["type"];				result["Day"] = postdata["day"];				result["Month"] = postdata["month"];				result["Year"] = postdata["year"];				result["Value"] = int(data["value"]);			}						callback(result, response);		}		/**		 * Loads a custom metric's data for a date or all time		 * @param	metric		The name of your metric		 * @param	callback	Your function to receive the data:  callback(data:Object, response:Response);		 * @param	options		Object with day, month, year properties or null for all time		 */		public static function CustomMetric(metric:String, callback:Function, options:Object = null):void		{			if(options == null)				options = new Object();						var postdata:Object = new Object();				postdata["metric"] = metric;			postdata["day"] = options.hasOwnProperty("day") ? options["day"] : 0;			postdata["month"] = options.hasOwnProperty("month") ? options["month"] : 0;			postdata["year"] = options.hasOwnProperty("year") ? options["year"] : 0;									PRequest.Load(SECTION, CUSTOMMETRIC, CustomMetricComplete, callback, postdata);		}				/**		 * Processes the response received from the server, returns the data and response to the user's callback		 * @param	callback	The user's callback function		 * @param	postdata	The data that was posted		 * @param	data		The XML returned from the server		 * @param	response	The response from the server		 */		private static function CustomMetricComplete(callback:Function, postdata:Object, data:XML = null, response:Response = null):void		{			if(callback == null)				return;							var result:Object = new Object();													if(response.Success)			{				result["Name"] = "CustomMetric";				result["Metric"] = postdata["metric"];				result["Day"] = postdata["day"];				result["Month"] = postdata["month"];				result["Year"] = postdata["year"];				result["Value"] = int(data["value"]);			}						callback(result, response);		}				/**		 * Loads a level counter metric's data for a level on a date or all time		 * @param	metric		The name of your metric		 * @param	level		The level number (integer) or name (string)		 * @param	callback	Your function to receive the data:  callback(data:Object, response:Response);		 * @param	options		Object with day, month, year properties or null for all time		 */		public static function LevelCounterMetric(metric:String, level:*, callback:Function, options:Object = null):void		{			LevelMetric(LEVELCOUNTERMETRIC, metric, level, LevelCounterMetricComplete, callback, options);		}						/**		 * Processes the response received from the server, returns the data and response to the user's callback		 * @param	callback	The user's callback function		 * @param	postdata	The data that was posted		 * @param	data		The XML returned from the server		 * @param	response	The response from the server		 */		private static function LevelCounterMetricComplete(callback:Function, postdata:Object, data:XML = null, response:Response = null):void		{			if(callback == null)				return;							var result:Object = new Object();															if(response.Success)			{				result["Name"] = "LevelAverageMetric";				result["Metric"] = postdata["metric"];				result["Level"] = postdata["level"];				result["Day"] = postdata["day"];				result["Month"] = postdata["month"];				result["Year"] = postdata["year"];				result["Value"] = int(data["value"]);			}						callback(result, response);		}		/**		 * Loads a level ranged metric's data for a level on a date or all time		 * @param	metric		The name of your metric		 * @param	level		The level number (integer) or name (string)		 * @param	callback	Your function to receive the data:  callback(data:Object, response:Response);		 * @param	options		Object with day, month, year properties or null for all time		 */		public static function LevelRangedMetric(metric:String, level:*, callback:Function, options:Object = null):void		{			LevelMetric(LEVELRANGEDMETRIC, metric, level, LevelRangedMetricComplete, callback, options);		}				/**		 * Processes the response received from the server, returns the data and response to the user's callback		 * @param	callback	The user's callback function		 * @param	postdata	The data that was posted		 * @param	data		The XML returned from the server		 * @param	response	The response from the server		 */		private static function LevelRangedMetricComplete(callback:Function, postdata:Object, data:XML = null, response:Response = null):void		{			if(callback == null)				return;							var result:Object = new Object();													if(response.Success)			{				result["Name"] = "LevelAverageMetric";				result["Metric"] = postdata["metric"];				result["Level"] = postdata["level"];				result["Day"] = postdata["day"];				result["Month"] = postdata["month"];				result["Year"] = postdata["year"];								var values:Array = new Array();				var list:XMLList = data["value"];				var n:XML;								for each(n in list)					values.push({TrackValue: int(n.@trackvalue), Value: int(n)});									result["Values"] = values;			}						callback(result, response);		}				/**		 * Loads a level average metric's data for a level on a date or all time		 * @param	metric		The name of your metric		 * @param	level		The level number (integer) or name (string)		 * @param	callback	Your function to receive the data:  callback(data:Object, response:Response);		 * @param	options		Object with day, month, year properties or null for all time		 */		public static function LevelAverageMetric(metric:String, level:*, callback:Function, options:Object = null):void		{			LevelMetric(LEVELAVERAGEMETRIC, metric, level, LevelAverageMetricComplete, callback, options);		}				/**		 * Processes the response received from the server, returns the data and response to the user's callback		 * @param	callback	The user's callback function		 * @param	postdata	The data that was posted		 * @param	data		The XML returned from the server		 * @param	response	The response from the server		 */		private static function LevelAverageMetricComplete(callback:Function, postdata:Object, data:XML = null, response:Response = null):void		{			if(callback == null)				return;							var result:Object = new Object();													if(response.Success)			{				result["Name"] = "LevelAverageMetric";				result["Metric"] = postdata["metric"];				result["Level"] = postdata["level"];				result["Day"] = postdata["day"];				result["Month"] = postdata["month"];				result["Year"] = postdata["year"];				result["Min"] = int(data["min"]);				result["Max"] = int(data["max"]);				result["Average"] = int(data["average"]);				result["Total"] = Number(data["total"]);			}						callback(result, response);		}				/**		 * Passes a level metric request on		 * @param	action		The action on the server		 * @param	metric		The metric		 * @param	level		The level number or name as a string		 * @param	complete	The complete handler		 * @param	callback	The user's callback function		 * @param	options		Object with day, month, year properties or null for all time		 */		private static function LevelMetric(action:String, metric:String, level:String, complete:Function, callback:Function, options:Object):void		{			if(options == null)				options = new Object();							var postdata:Object = new Object();				postdata["metric"] = metric;			postdata["level"] = level;			postdata["day"] = options.hasOwnProperty("day") ? options["day"] : 0;			postdata["month"] = options.hasOwnProperty("month") ? options["month"] : 0;			postdata["year"] = options.hasOwnProperty("year") ? options["year"] : 0;						PRequest.Load(SECTION, action, complete, callback, postdata);		}	}}